module("jive.oo.resolve",{setup:function(){this.superKlass=jive.oo.Class.extend(function(a){this.doubled=function(b){return b*2}});this.klass=this.superKlass.extend(function(a,b){a.protectedMember=function(){return"foo"};this.publicMember=function(){return"bar"};this.invokeRenamed=function(){return this.renamedProtectedMember()};this.doubled=function(c){return b.doubled.call(this,c)}})}});test("renames a protected member",1,function(){var b=jive.oo.resolve({protectedMember:"renamedProtectedMember"},this.klass);var a=new b();equal(a.invokeRenamed(),"foo","invoked the renamed method")});test("renames a public member",1,function(){var b=jive.oo.resolve({publicMember:"renamedPublicMember"},this.klass);var a=new b();equal(a.renamedPublicMember(),"bar","invoked the renamed method")});test("preserves the parent of the original class",1,function(){var a=jive.oo.resolve({publicMember:"renamedPublicMember"},this.klass);equal(a.superclass,this.superKlass,"the parent of ModifiedKlass is superKlass")});test("preserves members that are not renamed",1,function(){var b=jive.oo.resolve({protectedMember:"renamedProtectedMember"},this.klass);var a=new b();equal(a.publicMember(),"bar","invoked ModifiedKlass#publicMember()")});test("renames members of a class that was defined with an object literal",1,function(){var b=jive.oo.Class.extend({publicMember:function(){return"bar"}});var c=jive.oo.resolve({publicMember:"renamed"},b);var a=new c();equal(a.renamed(),"bar","invoked ModifiedKlass#renamed()")});test("excludes a member if `undefined` is given instead of a new name",2,function(){var c;var b=jive.oo.resolve({publicMember:c},this.klass);var a=new b();ok(!a.hasOwnProperty("publicMember"),'instance does not have its own "publicMember" property');ok(typeof a.publicMember=="undefined","`instance.publicMember` is undefined")});test("excludes members before renaming members",1,function(){var c;var b=jive.oo.resolve({protectedMember:"renamedProtectedMember",invokeRenamed:"publicMember",publicMember:c},this.klass);var a=new b();equal(a.publicMember(),"foo",'ModifiedKlass#publicMember() now returns "foo"')});test("preserves _super references",1,function(){var c;var b=jive.oo.resolve({protectedMember:"renamedProtectedMember",invokeRenamed:"publicMember",publicMember:c},this.klass);var a=new b();equal(a.doubled(2),4,"invoked doubled() implementation from superclass")});test("updates _super references when stacking mixins",1,function(){var c;var d=this.superKlass.extend(function(e,f){this.doubled=function(h){var g=h+1;return f.doubled.call(this,g)}});var b=jive.oo.compose(d,jive.oo.resolve({protectedMember:"renamedProtectedMember",invokeRenamed:"publicMember",publicMember:c},this.klass));var a=new b();equal(a.doubled(2),6,"new implementation of doubled() passes through odd adjustment from ExtraDoubler")});