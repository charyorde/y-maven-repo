module("jive.oo.compose",{setup:function(){this.Foo=jive.oo.Class.extend(function(a){this.foo=function(){}});this.Bar=jive.oo.Class.extend(function(a){this.bar=function(){}});this.BaseOutput=jive.oo.Class.extend(function(a){this.output=function(b){this.last=b;return b};this.lastOutput=function(){return this.last}});this.Doubler=this.BaseOutput.extend(function(a,b){this.output=function(d){var c=this.concat(d,d);return b.output.call(this,c)};a.concat=function(d,c){return d+c}});this.Quieter=this.BaseOutput.extend(function(a,b){this.output=function(d){var c=d.toLowerCase();return b.output.call(this,c)}});this.Exclaimer=this.BaseOutput.extend(function(a,b){this.output=function(d){var c=this.concat(d,"!!");return b.output.call(this,c)};a.concat=function(d,c){return d+c}})}});test("composes classes",2,function(){var a=jive.oo.compose(this.Foo,this.Bar),b=new a();ok(typeof b.foo=="function","new class inherits method foo()");ok(typeof b.bar=="function","new class inherits method bar()")});test("composes classes that share a parent class",1,function(){var a=jive.oo.compose(this.Doubler,this.Quieter),b=new a();ok(b.output("Hello")=="hellohello","output is downcased and doubled")});test("orders classes so that rightmost classes inherit from leftmost classes",2,function(){var a=jive.oo.compose(this.Doubler,this.Exclaimer);var b=jive.oo.compose(this.Exclaimer,this.Doubler);ok((new a).output("Hello")=="Hello!!Hello!!","exclamation marks are added before doubling");ok((new b).output("Hello")=="HelloHello!!","exclamation marks are added after doubling")});test("throws an error if inheritance chain cannot be made linear",1,function(){var a=jive.oo.Class.extend(),c=a.extend(),b;try{b=jive.oo.compose(this.Doubler,this.Quieter,c)}catch(d){ok(true,"jive.oo.compose() threw an exception")}});test("creates instances with their own state",3,function(){var c=jive.oo.compose(this.Exclaimer,this.Doubler),a=jive.oo.compose(this.Doubler,this.Exclaimer),d=new c(),b=new a();ok(d.output("Hello")=="HelloHello!!","exclamation marks are added before doubling");ok(b.output("Hello")=="Hello!!Hello!!","exclamation marks are added after doubling");ok(d.lastOutput()=="HelloHello!!","state of `second` does not clobber state of `first`")});