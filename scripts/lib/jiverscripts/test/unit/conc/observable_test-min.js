module("jive.conc.observable",{setup:function(){this.emitter={};this.controller={};jive.conc.observable(this.emitter);jive.conc.observable(this.controller)}});test("mixes into an existing object",4,function(){ok(typeof this.emitter.listeners=="function","emitter has a method called listeners()");ok(typeof this.emitter.addListener=="function","emitter has a method called addListener()");ok(typeof this.emitter.removeListener=="function","emitter has a method called removeListener()");ok(typeof this.emitter.emit=="function","emitter has a method called emit()")});test("binds event handlers",1,function(){var a=function(){};this.emitter.addListener("foo",a);ok(this.emitter.listeners("foo")[0]===a,"bound a handler to the 'foo' event")});test("unbinds event handlers from a given event",2,function(){var b=function(){},a=function(){};this.emitter.addListener("foo",b).addListener("foo",a);ok(this.emitter.listeners("foo").length===2,"bound two handlers to the 'foo' event");this.emitter.removeListener("foo");ok(this.emitter.listeners("foo").length===0,"unbound handlers from the 'foo' event")});test("unbinds a specific event handler from a given event",3,function(){var b=function(){},a=function(){};this.emitter.addListener("foo",b).addListener("foo",a);ok(this.emitter.listeners("foo").length===2,"bound two handlers to the 'foo' event");this.emitter.removeListener("foo",b);ok(this.emitter.listeners("foo").length===1,"one event handler remains bound to the 'foo' event");ok(this.emitter.listeners("foo")[0]===a,"handler_b remains bound to the 'foo' event")});asyncTest("emits events",1,function(){this.emitter.addListener("testEvent",function(){ok(true,"event handler was called");start()});this.emitter.emit("testEvent")});asyncTest("event handlers do not block",1,function(){var a=false;this.emitter.addListener("testEvent",function(){a=true;start()});this.emitter.emit("testEvent");ok(!a,"event handler has not been called yet")});asyncTest("event handlers run in separate execution contexts",1,function(){var a=false;this.emitter.addListener("testEvent",function(){a=true;throw"handlers that throw an error do not prevent other handlers from running"});this.emitter.addListener("testEvent",function(){ok(a,"the event handler that does not throw an error was called last");start()});this.emitter.emit("testEvent")});asyncTest("passes extra arguments to event handlers",2,function(){this.emitter.addListener("testEvent",function(d,c){ok(d=="foo","handler called with argument 'foo'");ok(c=="bar","handler called with argument 'bar'");start()});this.emitter.emit("testEvent","foo","bar")});asyncTest("event handlers are executed in the context of the object emitting the event",1,function(){var a=this;this.emitter.addListener("testEvent",function(){ok(this===a.emitter,"event handler was called in the context of emitter");start()});this.emitter.emit("testEvent")});asyncTest("emits a 'newListener' event when an event is bound",2,function(){var a=function(){};this.emitter.addListener("newListener",function(c,b){ok(c=="testEvent","'newListener' event was emitted with event type the listener was bound to");ok(b===a,"'newListener' event was emitted with reference to the new event handler");start()});this.emitter.addListener("testEvent",a)});test("method calls return the receiver so that calls can be chained",3,function(){ok(this.emitter.addListener("testEvent",function(){})===this.emitter,"addListener() is chainable");ok(this.emitter.removeListener("testEvent")===this.emitter,"removeListener() is chainable");ok(this.emitter.emit("testEvent")===this.emitter,"emit() is chainable")});test("returns a promise when emitting an event",1,function(){var a=this.emitter.emitP("testEvent","foo",1);ok(a instanceof jive.conc.Promise,"emitP() returns a promise")});asyncTest("passes promise as an event parameter",2,function(){var a;this.emitter.addListener("testEvent",function(d,c,e){ok(e instanceof jive.conc.Promise,"a promise was given as an event parameter");ok(e===a,"the same promise that was returned by emitP() was given as an event parameter");start()});a=this.emitter.emitP("testEvent","foo",1)});asyncTest("proxies events from other objects",1,function(){this.controller.proxyListener(this.emitter,"testEvent");this.controller.addListener("testEvent",function(){ok(true,"received 'testEvent' event");start()});this.emitter.emit("testEvent","foo")});asyncTest("proxies events with a different event name",1,function(){this.controller.proxyListener(this.emitter,"testEvent","higherLevelEvent");this.controller.addListener("higherLevelEvent",function(){ok(true,"received 'higherLevelEvent' event");start()});this.emitter.emit("testEvent","foo")});asyncTest("passes original event parameters with proxied events",1,function(){this.controller.proxyListener(this.emitter,"testEvent","higherLevelEvent");this.controller.addListener("higherLevelEvent",function(b){ok(b=="foo","received 'higherLevelEvent' event with argument 'foo'");start()});this.emitter.emit("testEvent","foo")});asyncTest("invokes listeners for proxied events in the context of the proxier",1,function(){var a=this.controller;this.controller.proxyListener(this.emitter,"testEvent","higherLevelEvent");this.controller.addListener("higherLevelEvent",function(){ok(this===a,"event listener was invoked in context of proxier");start()});this.emitter.emit("testEvent","foo")});asyncTest("runs a callback when an event is proxied",1,function(){this.controller.proxyListener(this.emitter,"testEvent","higherLevelEvent",function(b){ok(b=="foo","intercepted 'higherLevelEvent' event");start()});this.controller.addListener("higherLevelEvent",function(){});this.emitter.emit("testEvent","foo")});asyncTest("runs a callback when an event is proxied with its original name",1,function(){this.controller.proxyListener(this.emitter,"testEvent",function(b){ok(b=="foo","intercepted 'testEvent' event");start()});this.controller.addListener("testEvent",function(){});this.emitter.emit("testEvent","foo")});asyncTest("calls handlers that were registered after the event was fired during synchronous execution",1,function(){this.emitter.emit("testEvent","foo");this.emitter.addListener("testEvent",function(){ok(true,'invoked "testEvent" listener');start()})});