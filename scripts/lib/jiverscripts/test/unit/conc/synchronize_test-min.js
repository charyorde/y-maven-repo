module("jive.conc.synchronize",{setup:function(){this.promise_foo=new jive.conc.Promise();this.promise_bar=new jive.conc.Promise();this.obj={foo:this.promise_foo,bar:this.promise_bar,nao:3};this.array=[this.promise_foo,this.promise_bar,3]}});asyncTest("synchronizes an object with promises as values",3,function(){jive.conc.synchronize(this.obj).addCallback(function(a){ok(a.foo==1,"property 'foo' fulfilled with value 1");ok(a.bar==2,"property 'bar' fulfilled with value 2");ok(a.nao==3,"property 'nao' retained value 3");start()});this.promise_foo.emitSuccess(1);this.promise_bar.emitSuccess(2)});asyncTest("synchronizes an array of promises",4,function(){jive.conc.synchronize(this.array).addCallback(function(a){ok(a[0]==1,"first value fulfilled with value 1");ok(a[1]==2,"second value fulfilled with value 2");ok(a[2]==3,"third value retained value 3");ok(Object.prototype.toString.call(a)=="[object Array]","fulfilled value is an array");start()});this.promise_foo.emitSuccess(1);this.promise_bar.emitSuccess(2)});asyncTest("emits an error if any one promise emits an error",1,function(){jive.conc.synchronize(this.obj).addErrback(function(d,c){ok(d=="foo"&&c=="bar","synchronize() was interrupted by an error");start()});this.promise_foo.emitSuccess(1);this.promise_bar.emitError("foo","bar")});asyncTest("emits 'cancel' if any one promise emits 'cancel'",1,function(){jive.conc.synchronize(this.obj).addCancelback(function(){ok(true,"synchronize() was interrupted by a cancellation");start()});this.promise_foo.emitSuccess(1);this.promise_bar.cancel("foo","bar")});