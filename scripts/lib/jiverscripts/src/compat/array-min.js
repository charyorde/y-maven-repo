Array.prototype.forEach=Array.prototype.forEach||function(b){var a=this.length>>>0;if(typeof b!="function"){throw new TypeError()}var d=arguments[1];for(var c=0;c<a;c++){if(c in this){b.call(d,this[c],c,this)}}};Array.prototype.map=Array.prototype.map||function(b){var a=this.length>>>0;if(typeof b!="function"){throw new TypeError()}var e=new Array(a);var d=arguments[1];for(var c=0;c<a;c++){if(c in this){e[c]=b.call(d,this[c],c)}}return e};Array.prototype.reduce=Array.prototype.reduce||function(b){var a=this.length>>>0;if(typeof b!="function"){throw new TypeError()}if(a==0&&arguments.length==1){throw new TypeError()}var c=0;if(arguments.length>=2){var d=arguments[1]}else{do{if(c in this){d=this[c++];break}if(++c>=a){throw new TypeError()}}while(true)}for(;c<a;c++){if(c in this){d=b.call(null,d,this[c],c,this)}}return d};Array.prototype.reduceRight=function(b){var a=this.length>>>0;if(typeof b!="function"){throw new TypeError()}if(a==0&&arguments.length==1){throw new TypeError()}var c=a-1;if(arguments.length>=2){var d=arguments[1]}else{do{if(c in this){var d=this[c--];break}if(--c<0){throw new TypeError()}}while(true)}for(;c>=0;c--){if(c in this){d=b.call(null,d,this[c],c,this)}}return d};Array.prototype.filter=Array.prototype.filter||function(b){var a=this.length>>>0;if(typeof b!="function"){throw new TypeError()}var e=new Array();var d=arguments[1];for(var c=0;c<a;c++){if(c in this){var f=this[c];if(b.call(d,f,c)){e.push(f)}}}return e};Array.prototype.every=Array.prototype.every||function(b){var a=this.length>>>0;if(typeof b!="function"){throw new TypeError()}var d=arguments[1];for(var c=0;c<a;c++){if(c in this&&!b.call(d,this[c],c,this)){return false}}return true};Array.prototype.some=Array.prototype.some||function(b){var d=0,a=this.length>>>0;if(typeof b!="function"){throw new TypeError()}var c=arguments[1];for(;d<a;d++){if(d in this&&b.call(c,this[d],d,this)){return true}}return false};Array.prototype.indexOf=Array.prototype.indexOf||function(b){var a=this.length>>>0;var c=Number(arguments[1])||0;c=(c<0)?Math.ceil(c):Math.floor(c);if(c<0){c+=a}for(;c<a;c++){if(c in this&&this[c]===b){return c}}return -1};Array.prototype.lastIndexOf=Array.prototype.lastIndexOf||function(b){var a=this.length;var c=Number(arguments[1]);if(isNaN(c)){c=a-1}else{c=(c<0)?Math.ceil(c):Math.floor(c);if(c<0){c+=a}else{if(c>=a){c=a-1}}}for(;c>-1;c--){if(c in this&&this[c]===b){return c}}return -1};